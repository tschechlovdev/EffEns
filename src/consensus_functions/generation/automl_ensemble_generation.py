from enum import Enum, auto
import numpy as np
from numpy import ndarray
from ClusteringCS import ClusteringCS
from Optimizer.OptimizerSMAC import SMACOptimizer


class BaseClustererSelection(Enum):
    PARTITIONAL_SPACE = auto()
    KMEANS_SPACE = auto()
    ALL_ALGOS_SPACE = auto()


clusterer_selection_mapping = {BaseClustererSelection.KMEANS_SPACE: ClusteringCS.KMEANS_SPACE, 
                               BaseClustererSelection.PARTITIONAL_SPACE: ClusteringCS.PARTITIONAL_SPACE,
                               BaseClustererSelection.ALL_ALGOS_SPACE: ClusteringCS.ALL_ALGOS_SPACE}


def automl_ensemble(instances: ndarray, nr_partitions: int, nr_configurations: int = None, 
                    base_clusterers: BaseClustererSelection = BaseClustererSelection.KMEANS_SPACE, 
                    k_range=None, return_run_history: bool = False) -> ndarray:
    """
    Create ensemble from clusterings generated by EnsOptimizer when run on instances.
    Include the nr_partitions highest-ranked clusterings.
    Args:
        instances (ndarray of shape (N, d)): dataset
        nr_partitions (int): number of partitions / clusterings in ensemble
        nr_configurations (int, optional): number of confs SMAC tries. 
            Defaults to nr_partitions.
        base_clusterers (BaseClustererSelection, optional): Collection of clustering algorithms, optimizer
        tries out. Defaults to BaseClustererSelection.KMEANS_SPACE.
        k_range ([type], optional): EnsOptimizer only tries k values in k_range
        return_run_history (bool, optional): indicates whether run_history should be returned. Defaults to False.
    Raises:
        ValueError: raised if nr_configurations < nr_partitions:
    Returns:
        ndarray of shape (N, nr_partitions): ensemble of the nr_partitions highest-ranked clusterings / partitions.
    """
    if nr_configurations is None:
        nr_configurations = nr_partitions
    elif nr_configurations < nr_partitions:
        raise ValueError("nr_configurations is less than nr_partitions")
    N = instances.shape[0]
    clustering_space = clusterer_selection_mapping[base_clusterers]
    optimizer = SMACOptimizer(dataset=instances, n_loops=nr_configurations, cs=clustering_space, k_range=k_range)
    print("Starting SMAC in generation function: automl_ensemble")
    optimizer.optimize()
    run_history = optimizer.get_run_history()
    run_history.sort(key=lambda entry: entry.score)
    ensemble = np.empty((N, nr_partitions)).astype("int64")
    for i in range(nr_partitions):
        ensemble[:, i] = run_history[i].labels
    if(return_run_history):
        return (ensemble, run_history)
    return ensemble
